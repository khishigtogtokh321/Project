import { useMemo, useState } from "react";
import { Button } from "react-bootstrap";
import { FaSearch } from "react-icons/fa";
import { FaLocationArrow } from "react-icons/fa6";

import SearchCard from "./SearchCard";

const mockResults = [
  {
    id: 1,
    name: "Discret'Son - Laboratoire auditif",
    type: "Centre auditif",
    location: "Eaubonne",
    logo: "üîä",
  },
  {
    id: 2,
    name: "Krys Audition - La Ch√¢tre",
    type: "Centre auditif",
    location: "La Ch√¢tre",
    logo: "üéß",
  },
  {
    id: 3,
    name: "Krys Audition La Couronne - Cc Auchan",
    type: "Centre auditif",
    location: "La Couronne",
    logo: "üéß",
  },
  {
    id: 4,
    name: "Phon√®me - Saint-L√¥ - Germain Lebictel",
    type: "Audioproth√©siste",
    location: "Saint-L√¥",
    logo: "üë§",
  },
  {
    id: 5,
    name: "Phon√®me - Paris 15 - Montparnasse",
    type: "Audioproth√©siste",
    location: "Paris",
    logo: "üë§",
  },
  {
    id: 6,
    name: "Audition Conseil - Tours",
    type: "Centre auditif",
    location: "Tours",
    logo: "üéß",
  },
];

export default function SearchBar() {
  const [query, setQuery] = useState("");
  const [open, setOpen] = useState(false);

  const filtered = useMemo(
    () =>
      mockResults.filter((result) =>
        result.name.toLowerCase().includes(query.trim().toLowerCase())
      ),
    [query]
  );

  const handleNearMe = () => {
    if (!navigator.geolocation) {
      alert("–¢–∞–Ω—ã —Ö”©—Ç—á–∏–¥ –±–∞–π—Ä—à–ª—ã–≥ –∞–≤–∞—Ö –±–æ–ª–æ–º–∂–≥“Ø–π.");
      return;
    }

    navigator.geolocation.getCurrentPosition((pos) => {
      const lat = pos.coords.latitude;
      const lng = pos.coords.longitude;
      console.log("User location:", lat, lng);
    });
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    setOpen(false);
  };

  return (
    <div className="search-widget">
      <form
        className="search-box"
        role="search"
        aria-label="–≠–º—á, —ç–º–Ω—ç–ª–≥–∏–π–Ω —Ö–∞–π–ª—Ç"
        onSubmit={handleSubmit}
      >
        <div className="search-field">
          <label htmlFor="search-query" className="visually-hidden">
            “Æ–π–ª—á–∏–ª–≥—ç—ç —ç—Å–≤—ç–ª —ç–º—á–∏–π–Ω –Ω—ç—Ä
          </label>
          <input
            id="search-query"
            type="text"
            className="search-input"
            placeholder="–ù—ç—Ä / “Æ–π–ª—á–∏–ª–≥—ç—ç"
            autoComplete="off"
            value={query}
            onFocus={() => setOpen(true)}
            onChange={(event) => setQuery(event.target.value)}
            aria-autocomplete="list"
            aria-expanded={open}
            aria-controls="search-dropdown"
          />
        </div>

        <span className="search-divider" aria-hidden="true" />

        <div className="search-field">
          <label htmlFor="search-location" className="visually-hidden">
            –ë–∞–π—Ä—à–ª—ã–Ω —Ö–∞–π–ª—Ç
          </label>
          <input
            id="search-location"
            type="text"
            className="search-input search-input--location"
            placeholder="–≠–º–Ω—ç–ª–≥–∏–π–Ω —Ö–∞—è–≥"
          />
        </div>

        <div className="search-actions" aria-label="–¢—É—Å–ª–∞—Ö —Ç–æ–≤—á–ª—É—É—Ä—É—É–¥">
          <Button
            type="button"
            variant="outline-primary"
            className="near-me-button"
            onClick={handleNearMe}
            aria-label="–û–π—Ä –æ—Ä—á–º—ã–Ω –±–∞–π—Ä—à–ª–∞–∞—Ä —Ö–∞–π—Ö"
          >
            <FaLocationArrow aria-hidden="true" />
          </Button>
          <Button type="submit" className="search-btn">
            <FaSearch aria-hidden="true" />
            <span className="search-btn__label">–•–∞–π—Ö</span>
          </Button>
        </div>
      </form>

      {open && (
        <div
          id="search-dropdown"
          className="dropdown-list"
          role="listbox"
          onMouseLeave={() => setOpen(false)}
        >
          {filtered.length === 0 ? (
            <div className="dropdown-empty" role="status">
              –¢–æ—Ö–∏—Ä–æ—Ö “Ø—Ä –¥“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π
            </div>
          ) : (
            filtered.map((item) => (
              <SearchCard
                key={item.id}
                name={item.name}
                type={item.type}
                location={item.location}
                logo={item.logo}
                onSelect={() => {
                  setQuery(item.name);
                  setOpen(false);
                }}
              />
            ))
          )}
        </div>
      )}
    </div>
  );
}
